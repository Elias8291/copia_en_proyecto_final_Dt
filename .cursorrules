# Laravel Development Rules for Cursor

## Project Context
You are working on a Laravel 11+ application called "ReisenciaChingo" that appears to be a government/business registration system with geographic data, procedures (tramites), and user management.

## Core Principles
- Write concise, technical responses with accurate PHP examples
- Adhere to Laravel 11+ best practices and conventions
- Use object-oriented programming with SOLID principles
- Prefer iteration and modularization over duplication
- Use descriptive variable and method names
- Use lowercase with dashes for directories (e.g., app/Http/Controllers)
- Favor dependency injection and service containers

## PHP/Laravel Standards
- Use PHP 8.2+ features when appropriate (typed properties, match expressions)
- Follow PSR-12 coding standards
- Use strict typing: `declare(strict_types=1);`
- Utilize Laravel's built-in features and helpers when possible
- Follow Laravel's directory structure and naming conventions
- Implement proper error handling and logging
- Use Laravel's exception handling and logging features
- Create custom exceptions when necessary
- Use try-catch blocks for expected exceptions
- Use Laravel's validation features for form and request validation
- Implement middleware for request filtering and modification
- Utilize Laravel's Eloquent ORM for database interactions
- Use Laravel's query builder for complex database queries
- Implement proper database migrations and seeders

## Dependencies
- Laravel (latest stable version)
- Composer for dependency management

## Laravel Best Practices
- Use Eloquent ORM instead of raw SQL queries when possible
- Implement Repository pattern for data access layer
- Use Laravel's built-in authentication and authorization features
- Utilize Laravel's caching mechanisms for improved performance
- Implement job queues for long-running tasks
- Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests
- Implement API versioning for public APIs
- Use Laravel's localization features for multi-language support
- Implement proper CSRF protection and security measures
- Use Laravel Mix for asset compilation
- Implement proper database indexing for improved query performance
- Use Laravel's built-in pagination features
- Implement proper error logging and monitoring

## Key Conventions
1. Follow Laravel's MVC architecture
2. Use Laravel's routing system for defining application endpoints
3. Implement proper request validation using Form Requests
4. Use Laravel's Blade templating engine for views
5. Implement proper database relationships using Eloquent
6. Use Laravel's built-in authentication scaffolding
7. Implement proper API resource transformations
8. Use Laravel's event and listener system for decoupled code
9. Implement proper database transactions for data integrity
10. Use Laravel's built-in scheduling features for recurring tasks

## Project-Specific Guidelines
- This project handles geographic data (paises, estados, municipios, asentamientos)
- Business procedures (tramites) with multiple related entities
- File management and document handling
- Appointment scheduling (citas)
- System logging and notifications
- Provider management (proveedores)
- Activity and sector catalogs

## Code Generation Rules
- Always use proper Laravel naming conventions
- Include necessary imports and use statements
- Follow the existing database structure from migrations
- Use Spanish naming for business logic where appropriate
- Implement proper validation for all user inputs
- Add proper error handling and logging
- Use Laravel's built-in features over custom implementations
- Follow the existing project structure and patterns