// =====================================================
// SISTEMA DE GESTI√ìN DE PROVEEDORES - DIAGRAMA DE BD
// =====================================================
// Generado autom√°ticamente desde migraciones Laravel
// Fecha: 2025-01-17

Project SistemaProveedores {
  database_type: 'MySQL'
  Note: '''
  Sistema integral de gesti√≥n de proveedores con:
  - Registro y validaci√≥n de proveedores
  - Gesti√≥n de tr√°mites (Inscripci√≥n, Renovaci√≥n, Actualizaci√≥n)
  - Cat√°logo de actividades econ√≥micas SCIAN
  - Sistema de archivos y documentos
  - Geolocalizaci√≥n y direcciones
  - Citas y notificaciones
  - Control de permisos y roles
  '''
}

// =====================================================
// üë• M√ìDULO DE USUARIOS Y AUTENTICACI√ìN
// =====================================================

TableGroup usuarios_auth {
  users
  password_reset_tokens
  sessions
}

Table users {
  id bigint [pk, increment, note: 'ID √∫nico del usuario']
  nombre varchar(255) [not null, note: 'Nombre completo del usuario']
  correo varchar(255) [unique, not null, note: 'Email √∫nico para login']
  fecha_verificacion_correo timestamp [null, note: 'Fecha de verificaci√≥n del email']
  password varchar(255) [null, note: 'Hash de la contrase√±a']
  remember_token varchar(100) [null, note: 'Token para recordar sesi√≥n']
  rfc varchar(255) [not null, note: 'RFC del usuario']
  ultimo_acceso timestamp [null, note: '√öltimo acceso al sistema']
  estado enum('pendiente','activo','inactivo','suspendido') [default: 'pendiente', note: 'Estado actual del usuario']
  verification_token varchar(255) [null, note: 'Token de verificaci√≥n de email']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  deleted_at timestamp [null, note: 'Soft delete timestamp']
  
  Note: '''
  Tabla principal de usuarios del sistema.
  Maneja tanto proveedores como administradores.
  Incluye soft deletes y verificaci√≥n de email.
  '''
}

Table password_reset_tokens {
  email varchar(255) [pk, note: 'Email del usuario']
  token varchar(255) [not null, note: 'Token de reseteo']
  created_at timestamp [null, note: 'Fecha de creaci√≥n del token']
  
  Note: 'Tokens para reseteo de contrase√±as'
}

Table sessions {
  id varchar(255) [pk, note: 'ID √∫nico de la sesi√≥n']
  user_id bigint [null, ref: > users.id, note: 'Usuario propietario de la sesi√≥n']
  ip_address varchar(45) [null, note: 'Direcci√≥n IP del cliente']
  user_agent text [null, note: 'User agent del navegador']
  payload text [not null, note: 'Datos serializados de la sesi√≥n']
  last_activity int [not null, note: 'Timestamp de √∫ltima actividad']
  
  Note: 'Sesiones activas de usuarios'
}

// =====================================================
// üè¢ M√ìDULO DE PROVEEDORES
// =====================================================

TableGroup proveedores_core {
  proveedores
  tramites
  tramite_datos_generales
  tramite_datos_constitutivos
  tramite_contactos
}

Table proveedores {
  id bigint [pk, increment, note: 'ID √∫nico del proveedor']
  user_id bigint [unique, ref: - users.id, note: 'Relaci√≥n 1:1 con usuario']
  rfc varchar(13) [unique, not null, note: 'RFC √∫nico del proveedor']
  curp varchar(18) [null, note: 'CURP para personas f√≠sicas']
  tipo_persona enum('F√≠sica','Moral') [not null, note: 'Tipo de persona jur√≠dica']
  razon_social varchar(255) [null, note: 'Raz√≥n social o nombre completo']
  pv_numero varchar(20) [unique, null, note: 'N√∫mero de padr√≥n de proveedores']
  estado_padron enum('Activo','Inactivo','Vencido','Pendiente') [default: 'Pendiente', note: 'Estado en el padr√≥n']
  fecha_alta_padron date [null, note: 'Fecha de alta en el padr√≥n']
  fecha_vencimiento_padron date [null, note: 'Fecha de vencimiento del registro']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Informaci√≥n principal de proveedores registrados.
  Diferencia entre personas f√≠sicas y morales.
  Controla el estado en el padr√≥n oficial.
  '''
}

Table tramites {
  id bigint [pk, increment, note: 'ID √∫nico del tr√°mite']
  proveedor_id bigint [ref: > proveedores.id, note: 'Proveedor que realiza el tr√°mite']
  direccion_id bigint [null, ref: > direcciones.id, note: 'Direcci√≥n asociada al tr√°mite']
  tipo enum('Inscripci√≥n','Renovaci√≥n','Actualizaci√≥n') [not null, note: 'Tipo de tr√°mite']
  estado enum('Borrador','En Revisi√≥n','Requiere Correcciones','En Cotejo','Aprobado','Rechazado') [default: 'Borrador', note: 'Estado actual del tr√°mite']
  fecha_solicitud timestamp [null, note: 'Fecha de env√≠o de la solicitud']
  fecha_aprobacion_rechazo timestamp [null, note: 'Fecha de resoluci√≥n final']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Tr√°mites realizados por proveedores.
  Flujo: Borrador ‚Üí En Revisi√≥n ‚Üí Cotejo ‚Üí Aprobado/Rechazado
  '''
}

Table tramite_datos_generales {
  id bigint [pk, increment]
  tramite_id bigint [unique, ref: - tramites.id, note: 'Relaci√≥n 1:1 con tr√°mite']
  giro text [not null, note: 'Descripci√≥n del giro comercial']
  pagina_web varchar(255) [null, note: 'Sitio web del proveedor']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Datos generales espec√≠ficos del tr√°mite'
}

Table tramite_datos_constitutivos {
  id bigint [pk, increment]
  tramite_id bigint [unique, ref: - tramites.id, note: 'Relaci√≥n 1:1 con tr√°mite']
  numero_instrumento_notarial varchar(100) [null, note: 'N√∫mero del instrumento notarial']
  fecha_instrumento_notarial date [null, note: 'Fecha del instrumento']
  nombre_notario_publico varchar(255) [null, note: 'Nombre del notario']
  numero_notaria varchar(50) [null, note: 'N√∫mero de la notar√≠a']
  entidad_federativa_notaria varchar(100) [null, note: 'Estado de la notar√≠a']
  folio_mercantil varchar(50) [null, note: 'Folio del registro mercantil']
  fecha_constitucion date [null, note: 'Fecha de constituci√≥n de la empresa']
  capital_social decimal(15,2) [null, note: 'Capital social declarado']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Datos constitutivos para personas morales'
}

Table tramite_contactos {
  id bigint [pk, increment]
  tramite_id bigint [ref: > tramites.id, note: 'Tr√°mite al que pertenece']
  nombre_completo varchar(255) [not null, note: 'Nombre del contacto']
  puesto varchar(100) [null, note: 'Cargo o puesto']
  telefono varchar(50) [null, note: 'Tel√©fono de contacto']
  email varchar(255) [null, note: 'Email de contacto']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Contactos asociados a cada tr√°mite'
}

// =====================================================
// üåç M√ìDULO DE GEOGRAF√çA Y DIRECCIONES
// =====================================================

TableGroup geografia {
  paises
  estados
  municipios
  localidades
  asentamientos
  direcciones
  direcciones_no_catalogadas
  geolocalizaciones
}

Table paises {
  id bigint [pk, increment]
  nombre varchar(370) [unique, not null, note: 'Nombre del pa√≠s']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Cat√°logo de pa√≠ses'
}

Table estados {
  id bigint [pk, increment]
  pais_id bigint [ref: > paises.id, note: 'Pa√≠s al que pertenece']
  nombre varchar(370) [not null, note: 'Nombre del estado']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Estados o provincias por pa√≠s'
}

Table municipios {
  id bigint [pk, increment]
  estado_id bigint [ref: > estados.id, note: 'Estado al que pertenece']
  nombre varchar(370) [not null, note: 'Nombre del municipio']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Municipios por estado'
}

Table localidades {
  id bigint [pk, increment]
  municipio_id bigint [ref: > municipios.id, note: 'Municipio al que pertenece']
  nombre varchar(370) [not null, note: 'Nombre de la localidad']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Localidades por municipio'
}

Table asentamientos {
  id bigint [pk, increment]
  municipio_id bigint [ref: > municipios.id, note: 'Municipio al que pertenece']
  nombre varchar(255) [not null, note: 'Nombre del asentamiento']
  codigo_postal varchar(10) [not null, note: 'C√≥digo postal']
  tipo_asentamiento varchar(100) [null, note: 'Tipo (Colonia, Fraccionamiento, etc.)']
  
  Note: 'Asentamientos humanos con c√≥digo postal'
}

Table geolocalizaciones {
  id bigint [pk, increment]
  latitud decimal(10,8) [null, note: 'Coordenada de latitud']
  longitud decimal(11,8) [null, note: 'Coordenada de longitud']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Coordenadas geogr√°ficas precisas'
}

Table direcciones {
  id bigint [pk, increment]
  calle varchar(255) [not null, note: 'Nombre de la calle']
  numero_exterior varchar(50) [null, note: 'N√∫mero exterior']
  numero_interior varchar(50) [null, note: 'N√∫mero interior o departamento']
  codigo_postal varchar(10) [not null, note: 'C√≥digo postal']
  referencias text [null, note: 'Referencias adicionales']
  asentamiento_id bigint [null, ref: > asentamientos.id, note: 'Asentamiento catalogado']
  geolocalizacion_id bigint [null, ref: > geolocalizaciones.id, note: 'Coordenadas exactas']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Direcciones usando cat√°logos oficiales'
}

Table direcciones_no_catalogadas {
  id bigint [pk, increment]
  direccion_id bigint [unique, ref: - direcciones.id, note: 'Direcci√≥n base']
  colonia_texto varchar(255) [not null, note: 'Colonia en texto libre']
  municipio_texto varchar(255) [not null, note: 'Municipio en texto libre']
  estado_texto varchar(255) [not null, note: 'Estado en texto libre']
  pais_texto varchar(255) [not null, note: 'Pa√≠s en texto libre']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Direcciones fuera de cat√°logos oficiales'
}

// =====================================================
// üìã M√ìDULO DE ACTIVIDADES ECON√ìMICAS
// =====================================================

TableGroup actividades_economicas {
  catalogo_sectores
  catalogo_actividades
  tramite_actividades
}

Table catalogo_sectores {
  id bigint [pk, increment]
  nombre varchar(255) [not null, note: 'Nombre del sector econ√≥mico']
  
  Note: 'Sectores econ√≥micos principales (SCIAN)'
}

Table catalogo_actividades {
  id bigint [pk, increment]
  sector_id bigint [ref: > catalogo_sectores.id, note: 'Sector al que pertenece']
  codigo_scian varchar(20) [null, note: 'C√≥digo SCIAN oficial']
  nombre varchar(500) [not null, note: 'Descripci√≥n de la actividad']
  estado enum('Aprobada','Pendiente de Revisi√≥n') [default: 'Aprobada', note: 'Estado de la actividad']
  creada_por_usuario_id bigint [null, ref: > users.id, note: 'Usuario que cre√≥ la actividad']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Cat√°logo de actividades econ√≥micas basado en SCIAN.
  Permite actividades personalizadas pendientes de revisi√≥n.
  '''
}

Table tramite_actividades {
  tramite_id bigint [ref: > tramites.id, note: 'Tr√°mite asociado']
  actividad_id bigint [ref: > catalogo_actividades.id, note: 'Actividad econ√≥mica']
  es_principal boolean [default: false, note: 'Indica si es la actividad principal']
  
  indexes {
    (tramite_id, actividad_id) [pk, name: 'pk_tramite_actividades']
  }
  
  Note: '''
  Tabla pivot: Actividades econ√≥micas por tr√°mite.
  Un tr√°mite puede tener m√∫ltiples actividades.
  Una debe marcarse como principal.
  '''
}

// =====================================================
// üìÑ M√ìDULO DE DOCUMENTOS Y ARCHIVOS
// =====================================================

TableGroup documentos {
  catalogo_archivos
  tramite_archivos
}

Table catalogo_archivos {
  id bigint [pk, increment]
  nombre_documento varchar(255) [not null, note: 'Nombre del tipo de documento']
  descripcion text [null, note: 'Descripci√≥n del documento requerido']
  aplica_a enum('F√≠sica','Moral','Ambas') [default: 'Ambas', note: 'A qu√© tipo de persona aplica']
  
  Note: '''
  Cat√°logo de documentos requeridos.
  Define qu√© documentos necesita cada tipo de persona.
  '''
}

Table tramite_archivos {
  id bigint [pk, increment]
  tramite_id bigint [ref: > tramites.id, note: 'Tr√°mite al que pertenece']
  catalogo_archivo_id bigint [ref: > catalogo_archivos.id, note: 'Tipo de documento']
  nombre_original_archivo varchar(255) [not null, note: 'Nombre original del archivo']
  path_almacenamiento varchar(500) [not null, note: 'Ruta de almacenamiento']
  hash_archivo varchar(64) [null, note: 'Hash para verificar integridad']
  estado_revision enum('Pendiente','Aprobado','Rechazado con Comentarios') [default: 'Pendiente', note: 'Estado de revisi√≥n']
  comentarios_revision text [null, note: 'Comentarios del revisor']
  revisor_id bigint [null, ref: > users.id, note: 'Usuario que revis√≥']
  fecha_revision timestamp [null, note: 'Fecha de revisi√≥n']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Archivos subidos por tr√°mite.
  Incluye control de revisi√≥n y comentarios.
  '''
}

// =====================================================
// üìÖ M√ìDULO DE CITAS Y REVISIONES
// =====================================================

TableGroup citas_revisiones {
  citas
  catalogo_secciones
  tramite_secciones_revision
}

Table citas {
  id bigint [pk, increment]
  tramite_id bigint [ref: > tramites.id, note: 'Tr√°mite asociado']
  fecha_hora_cita datetime [not null, note: 'Fecha y hora de la cita']
  tipo enum('Cotejo de Documentos','Aclaraciones') [not null, note: 'Tipo de cita']
  estado enum('Programada','Completada','Cancelada','No Asisti√≥') [default: 'Programada', note: 'Estado de la cita']
  revisor_asignado_id bigint [null, ref: > users.id, note: 'Revisor asignado']
  notas text [null, note: 'Notas adicionales']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Citas programadas para revisi√≥n de tr√°mites.
  Incluye cotejo de documentos y aclaraciones.
  '''
}

Table catalogo_secciones {
  id bigint [pk, increment]
  nombre_seccion varchar(255) [not null, note: 'Nombre de la secci√≥n']
  orden int [default: 0, note: 'Orden de presentaci√≥n']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: 'Secciones del formulario de tr√°mite'
}

Table tramite_secciones_revision {
  id bigint [pk, increment]
  tramite_id bigint [ref: > tramites.id, note: 'Tr√°mite en revisi√≥n']
  seccion_id bigint [ref: > catalogo_secciones.id, note: 'Secci√≥n revisada']
  estado_revision enum('Pendiente','Aprobado','Rechazado') [default: 'Pendiente', note: 'Estado de la secci√≥n']
  comentarios_revision text [null, note: 'Comentarios espec√≠ficos']
  revisor_id bigint [null, ref: > users.id, note: 'Revisor asignado']
  fecha_revision timestamp [null, note: 'Fecha de revisi√≥n']
  contenido_id bigint [not null, note: 'ID del contenido polim√≥rfico']
  contenido_type varchar(255) [not null, note: 'Tipo del contenido polim√≥rfico']
  
  indexes {
    (tramite_id, seccion_id) [unique, name: 'unique_tramite_seccion']
    (contenido_id, contenido_type) [name: 'idx_contenido_polimorfico']
  }
  
  Note: '''
  Revisi√≥n por secciones de cada tr√°mite.
  Relaci√≥n polim√≥rfica para diferentes tipos de contenido.
  '''
}

// =====================================================
// üîî M√ìDULO DE NOTIFICACIONES
// =====================================================

TableGroup notificaciones {
  notificaciones
}

Table notificaciones {
  id bigint [pk, increment]
  user_id bigint [ref: > users.id, note: 'Usuario destinatario']
  mensaje varchar(500) [not null, note: 'Mensaje de la notificaci√≥n']
  leida boolean [default: false, note: 'Indica si fue le√≠da']
  url_destino varchar(255) [null, note: 'URL de destino al hacer clic']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Sistema de notificaciones para usuarios.
  Incluye estado de lectura y enlaces directos.
  '''
}

// =====================================================
// üîê M√ìDULO DE PERMISOS Y ROLES
// =====================================================

TableGroup permisos_roles {
  permissions
  roles
  model_has_permissions
  model_has_roles
  role_has_permissions
}

Table permissions {
  id bigint [pk, increment]
  name varchar(255) [not null, note: 'Nombre del permiso']
  guard_name varchar(255) [not null, note: 'Guard de autenticaci√≥n']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  indexes {
    (name, guard_name) [unique, name: 'permissions_name_guard_name_unique']
  }
  
  Note: 'Permisos espec√≠ficos del sistema (Spatie)'
}

Table roles {
  id bigint [pk, increment]
  name varchar(255) [not null, note: 'Nombre del rol']
  guard_name varchar(255) [not null, note: 'Guard de autenticaci√≥n']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  indexes {
    (name, guard_name) [unique, name: 'roles_name_guard_name_unique']
  }
  
  Note: 'Roles del sistema (Admin, Proveedor, etc.)'
}

Table model_has_permissions {
  permission_id bigint [ref: > permissions.id, note: 'Permiso asignado']
  model_type varchar(255) [not null, note: 'Tipo de modelo (User, etc.)']
  model_id bigint [not null, note: 'ID del modelo']
  
  indexes {
    (permission_id, model_id, model_type) [pk, name: 'model_has_permissions_permission_model_type_primary']
    (model_id, model_type) [name: 'model_has_permissions_model_id_model_type_index']
  }
  
  Note: 'Permisos directos a modelos (polim√≥rfico)'
}

Table model_has_roles {
  role_id bigint [ref: > roles.id, note: 'Rol asignado']
  model_type varchar(255) [not null, note: 'Tipo de modelo']
  model_id bigint [not null, note: 'ID del modelo']
  
  indexes {
    (role_id, model_id, model_type) [pk, name: 'model_has_roles_role_model_type_primary']
    (model_id, model_type) [name: 'model_has_roles_model_id_model_type_index']
  }
  
  Note: 'Roles asignados a modelos (polim√≥rfico)'
}

Table role_has_permissions {
  permission_id bigint [ref: > permissions.id, note: 'Permiso incluido']
  role_id bigint [ref: > roles.id, note: 'Rol que incluye el permiso']
  
  indexes {
    (permission_id, role_id) [pk, name: 'role_has_permissions_permission_id_role_id_primary']
  }
  
  Note: 'Permisos incluidos en cada rol'
}

// =====================================================
// ‚öôÔ∏è M√ìDULO DE SISTEMA Y LOGS
// =====================================================

TableGroup sistema {
  logs
  cache
  cache_locks
  jobs
  job_batches
  failed_jobs
}

Table logs {
  id bigint [pk, increment]
  level varchar(20) [not null, note: 'Nivel del log (info, error, etc.)']
  message varchar(1000) [not null, note: 'Mensaje del log']
  channel varchar(100) [null, note: 'Canal del log']
  context text [null, note: 'Contexto adicional (JSON)']
  user_id bigint [null, ref: > users.id, note: 'Usuario asociado']
  ip_address varchar(45) [null, note: 'Direcci√≥n IP']
  user_agent varchar(500) [null, note: 'User agent']
  url varchar(1000) [null, note: 'URL de la petici√≥n']
  method varchar(10) [null, note: 'M√©todo HTTP']
  created_at timestamp [not null]
  updated_at timestamp [not null]
  
  Note: '''
  Logs detallados del sistema.
  Incluye contexto de usuario y petici√≥n HTTP.
  '''
}

Table cache {
  key varchar(255) [pk, note: 'Clave del cache']
  value mediumtext [not null, note: 'Valor almacenado']
  expiration int [not null, note: 'Timestamp de expiraci√≥n']
  
  Note: 'Cache del sistema Laravel'
}

Table cache_locks {
  key varchar(255) [pk, note: 'Clave del lock']
  owner varchar(255) [not null, note: 'Propietario del lock']
  expiration int [not null, note: 'Timestamp de expiraci√≥n']
  
  Note: 'Locks para operaciones at√≥micas'
}

Table jobs {
  id bigint [pk, increment]
  queue varchar(255) [not null, note: 'Nombre de la cola']
  payload longtext [not null, note: 'Datos del job serializado']
  attempts tinyint [not null, note: 'N√∫mero de intentos']
  reserved_at int [null, note: 'Timestamp de reserva']
  available_at int [not null, note: 'Timestamp de disponibilidad']
  created_at int [not null, note: 'Timestamp de creaci√≥n']
  
  indexes {
    queue [name: 'jobs_queue_index']
  }
  
  Note: 'Cola de trabajos en segundo plano'
}

Table job_batches {
  id varchar(255) [pk, note: 'ID del lote']
  name varchar(255) [not null, note: 'Nombre del lote']
  total_jobs int [not null, note: 'Total de trabajos']
  pending_jobs int [not null, note: 'Trabajos pendientes']
  failed_jobs int [not null, note: 'Trabajos fallidos']
  failed_job_ids longtext [not null, note: 'IDs de trabajos fallidos']
  options mediumtext [null, note: 'Opciones del lote']
  cancelled_at int [null, note: 'Timestamp de cancelaci√≥n']
  created_at int [not null]
  finished_at int [null, note: 'Timestamp de finalizaci√≥n']
  
  Note: 'Lotes de trabajos agrupados'
}

Table failed_jobs {
  id bigint [pk, increment]
  uuid varchar(255) [unique, not null, note: 'UUID √∫nico del trabajo']
  connection text [not null, note: 'Conexi√≥n utilizada']
  queue text [not null, note: 'Cola donde fall√≥']
  payload longtext [not null, note: 'Datos del trabajo']
  exception longtext [not null, note: 'Excepci√≥n ocurrida']
  failed_at timestamp [default: `CURRENT_TIMESTAMP`, note: 'Timestamp del fallo']
  
  Note: 'Trabajos que fallaron en su ejecuci√≥n'
}